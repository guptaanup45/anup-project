# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Release to PyPi and DockerHub

on:
  release:
    types: [published, edited]

jobs:
  pypi:
    runs-on: ubuntu-latest
    env:
      RELEASE_REF: ${{ github.ref }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@3.0.0          
      - name: Release Version
        run: |
          export RELEASE_VERSION=${GITHUB_REF_SLUG}
          bash scripts/version_validation.sh
          echo -n $RELEASE_VERSION > ./version
          echo "::set-env name=RELEASE_VERSION::${RELEASE_VERSION}"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools==44.1.0 wheel==0.34.2 twine==3.1.1
          pip install -r requirements.txt
      - name: Test
        run: |
          python -m unittest discover -s tests -v
      - name: Build Package
        run: |
          python setup.py sdist bdist_wheel
          twine check ./dist/*
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PIP_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PIP_PASSWORD }}
          TWINE_NON_INTERACTIVE: true
        run: |
          twine upload ./dist/*

  dockerhub:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@3.0.0          
      - name: Release Version
        run: |
          export RELEASE_VERSION=${GITHUB_REF_SLUG}
          bash scripts/version_validation.sh
          echo -n $RELEASE_VERSION > ./version
          export _DOCKER_TAG="unfor19/appy:${RELEASE_VERSION}"
          echo "::set-env name=DOCKER_TAG::${_DOCKER_TAG}"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test
        run: |
          python -m unittest discover -s tests -v
      - name: Build Docker Image
        run: |
          docker build . --file Dockerfile --tag "${DOCKER_TAG}"
      - name: Push to DockerHub
        run: |
          echo '${{ secrets.DOCKER_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${DOCKER_TAG}"
